###Latin square###
#A more specific case of blocking is known as "latin square".
#This concept of blocking can be imagined as "2 dimensional blocking", that is we do 2 layer of blocking.
#The oldest application can be found in agriculture where the researcher trying to block the effect of
#"row" and "collumn" of the field.
#The rule in which the seed be planted in this segmented field is similar to the game of sudoku (one type
#can only exist once for each collumn and row).
#The rule in which latin square is designed is also widely used as scheduling method in many sports event
#Lets try to apply latin square in the following sample data
rows = c(rep("r1",1), rep("r2",1), rep("r3",1), rep("r4",1), rep("r5",1))
cols = c(rep("cA",5), rep("cB",5), rep("cC",5), rep("cD",5), rep("cE",5))
treatments = c("A","C","D","E","B", "D","B","C","A","E", "E","A","B","C","D", "B","E","A","D","C", "C","D","E","B","A")
matrix(y$treatments, 5,5)
yield = c(7.4,11.8,10.1,8.8,11.8,8.9,6.5,17.9,10.1,8.8,5.8,8.7,9.0,15.7,14.3,12.0,7.6,8.5,11.1,18.4,14.3,7.9,7.1,7.4,10.1)
y = data.frame(cols,rows,treatments, yield)
plot(yield ~ rows+cols+treatments,y)
par(mfrow = c(2,2))
plot(yield ~ rows+cols+treatments,y)
View(y)
plot(yield ~ rows+cols+treatments,data = y)
par(mfrow = c(1,1))
ltn_aov = aov(yield ~ cols+rows+treatments, data = y)
summary(ltn_aov)
matrix(y$treatments, 5,5)
#on top of latin square where the two latin squares are mutually orthogonal.
#To give a more approachable example, take an example of the following situation:
#a car company is trying to reduce their total cost of maintenance by making sure that they provide
#a more efficient maintenance for the tires of their cars. To study the effect of tires rotation,
#the company observed from 4 different location based on the general weather characteristics (which translates
#into type of tires). The manufacturer also needs to ensure the maintanance can be applied for all the model
#of their released car. Lastly, the manufacturer also want to provide the best possible service without
#additional cost, that is by comparing the tire brand.
#If there is no significant difference in thread wears between the front and rear tires within the 10,000 miles,
#then the tire manufacturer can claim that their tires do not need to be rotated before 10,000 miles.
wthr = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
mdl = c(rep("A",5), rep("B",5), rep("C",5), rep("D",5))
install.packages("agricolae")
#on top of latin square where the two latin squares are mutually orthogonal.
#To give a more approachable example, take an example of the following situation:
#a car company is trying to reduce their total cost of maintenance by making sure that they provide
#a more efficient maintenance for the tires of their cars. To study the effect of tires rotation,
#the company observed from 4 different location based on the general weather characteristics (which translates
#into type of tires). The manufacturer also needs to ensure the maintanance can be applied for all the model
#of their released car. Lastly, the manufacturer also want to provide the best possible service without
#additional cost, that is by comparing the tire brand.
#If there is no significant difference in thread wears between the front and rear tires within the 10,000 miles,
#then the tire manufacturer can claim that their tires do not need to be rotated before 10,000 miles.
library(agricolae)
wthr = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
mdl = c(rep("A",5), rep("B",5), rep("C",5), rep("D",5))
grec_design = design.graeco(wthr, mdl, seed = 19)
grec_design$sketch
grec_design$book
tire = c(16, 16, 25, 18, 23, 15, 5, 25, 20, 24, 17, 16, 15, 19, 26, 15)
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
wthr = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
mdl = c(rep("A",5), rep("B",5), rep("C",5), rep("D",5))
grec_design = design.graeco(wthr, mdl, seed = 0)
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
grec_design$
tire = data.frame(cbind(grec_design$book, tire))
grec_design$sketch
wthr = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
mdl = c(rep("A",1), rep("B",1), rep("C",1), rep("D",1))
tire = c(16, 16, 25, 18, 23, 15, 5, 25, 20, 24, 17, 16, 15, 19, 26, 15)
grec_design = design.graeco(wthr, mdl, seed = 0)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
grec_design = design.graeco(wthr, mdl, seed = 11)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
wthr = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
mdl = c(rep("A",1), rep("B",1), rep("C",1), rep("D",1))
tire = c(6, 16, 25, 18, 23, 15, 5, 25, 20, 24, 17, 16, 15, 19, 26, 15)
grec_design = design.graeco(wthr, mdl, seed = 11)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
wthr = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
mdl = c(rep("A",1), rep("B",1), rep("C",1), rep("D",1))
tire = c(6, 16, 25, 18, 23, 15, 5, 25, 20, 24, 17, 16, 15, 19, 26, 5)
grec_design = design.graeco(wthr, mdl, seed = 11)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
wthr = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
mdl = c(rep("A",1), rep("B",1), rep("C",1), rep("D",1))
tire = c(6, 16, 21, 18, 23, 15, 5, 25, 20, 24, 17, 16, 15, 19, 26, 15)
grec_design = design.graeco(wthr, mdl, seed = 11)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
pst = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
brnd = c(rep("A",1), rep("B",1), rep("C",1), rep("D",1))
tire = c(6, 16, 29, 18, 23, 15, 5, 25, 20, 24, 17, 16, 15, 19, 26, 15)
grec_design = design.graeco(wthr, mdl, seed = 11)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
tire = c(6, 16, 29, 18, 23, 15, 5, 25, 20, 24, 7, 16, 15, 19, 26, 15)
grec_design = design.graeco(wthr, mdl, seed = 11)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
#on top of latin square where the two latin squares are mutually orthogonal.
#To give a more approachable example, take an example of the following situation:
#a car company is trying to reduce their total cost of maintenance by making sure that they provide
#a more efficient maintenance for the tires of their cars. To study the effect of tires rotation,
#the company observed from 4 different location based on the general weather characteristics (which translates
#into type of tires). The manufacturer also needs to ensure the maintanance can be applied for all the model
#of their released car. Lastly, the manufacturer also want to provide the best possible service without
#additional cost, that is by comparing the tire brand.
#If there is no significant difference in thread wears between the front and rear tires within the 10,000 miles,
#then the tire manufacturer can claim that their tires do not need to be rotated before 10,000 miles.
rm(list = ls())
pst = c(rep("1",1), rep("2",1), rep("3",1), rep("4",1))
brnd = c(rep("A",1), rep("B",1), rep("C",1), rep("D",1))
tire = c(6, 16, 29, 18, 23, 15, 5, 25, 20, 24, 7, 16, 15, 19, 26, 15)
grec_design = design.graeco(wthr, mdl, seed = 11)
grec_design = design.graeco(pst, brnd, seed = 11)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+wthr+mdl, data = tire)
summary(grec_aov)
grec_aov = aov(tire~row+col+pst+brnd, data = tire)
summary(grec_aov)
tire = c(6, 16, 29, 18, 23, 15, 5, 25, 20, 4, 7, 16, 15, 19, 26, 15)
grec_design = design.graeco(pst, brnd, seed = 11)
grec_design$sketch
tire = data.frame(cbind(grec_design$book, tire))
grec_aov = aov(tire~row+col+pst+brnd, data = tire)
summary(grec_aov)
###Two way ANOVA###
#ANOVA in which we actually consider 2nd factor to be variable experiment (not something that only helps
#in the analysis like the block factor).
#Lets go back  to the previous penguins data
library(palmerpenguins)
data("penguins")
View(penguins)
penguins %>%
group_by(sex) %>%
summarize(across(where(is.numeric), mean, na.rm = TRUE))
na.omit(penguins) %>%
group_by(sex) %>%
summarize(across(where(is.numeric), mean, na.rm = TRUE))
#A clear difference between male and female body mass
#A two way ANOVA will do analysis of whether species and sex of the penguins affect their body mass.
tw_aov = aov(body_mass_g ~ species + sex, data = penguins)
summary(tw_aov)
#Interaction between factors are sometimes also within interest. This interaction term is interpreted as
#combination/composite effect between factors
tw_aov2 = aov(body_mass_g ~ species * sex, data = penguins)
summary(tw_aov2)
#Now lets compute each type of SS in the case of the previous two way ANOVA for the penguins data
#Type I SS
anova(lm(body_mass_g ~ species * sex, data = penguins))
anova(lm(body_mass_g ~ sex * species, data = penguins))
#Type III SS
options(contrasts = c(“contr.sum”,”contr.poly”))
#Type III SS
model3 = lm(body_mass_g ~ species * sex, data = penguins)
drop1(model3, .~., test=”F”)
options(contrasts = c(“contr.sum”,”contr.poly”))
options(contrasts = “contr.sum”)
#Type III SS
rm(model3)
#Type III SS
library(car)
Anova(lm(body_mass_g ~ species * sex, data = penguins, contrasts=list(topic=contr.sum, sys=contr.sum)), type=3))
Anova(lm(body_mass_g ~ species * sex, data = penguins, contrasts=list(topic=contr.sum, sys=contr.sum)), type="III"))
Anova(lm(body_mass_g ~ species * sex, data = penguins, contrasts=list(IV=contr.poly)), type="III")
Anova(lm(body_mass_g ~ species * sex, data = penguins, contrasts=list(species=contr.sum, sex = contr.sum)), type="III")
##Response Plot##
library(ggpubr)
penguins = na.omit(penguins)
ggline(penguins, x = "species", y = "body_mass_g", color = "sex",
add = c("mean_se", "dotplot"),
palette = c("#00AFBB", "#E7B800"))
ggline(penguins, x = "species", y = "body_mass_g", color = "sex",
add = c("mean_se", "dotplot"))
ggline(penguins, x = "species", y = "body_mass_g", color = "sex",
add = c("mean_se"))
#Interaction plot
interaction.plot(x.factor = penguins$species, trace.factor = penguins$sex,
response = penguins$body_mass_g, fun = mean,
type = "b", legend = TRUE,
xlab = "Species", ylab="Body Mass (g)",
pch=c(1,19), col = c("#00AFBB", "#E7B800"))
#Plot one of the variable into histogram
library(ggplot2)
flipper_hist = ggplot(data = penguins, aes(x = flipper_length_mm)) +
geom_histogram(aes(fill = species),
alpha = 0.5,
position = "identity") +
scale_fill_manual(values = c("darkorange","purple","cyan4")) +
labs(x = "Flipper length (mm)",
y = "Frequency",
title = "Penguin flipper lengths")
flipper_hist
penguins %>%
group_by(island) %>%
summarize(across(where(is.numeric), mean, na.rm = TRUE))
#As it can be seen from grouping above, the mean size of penguins in Biscoe island does seem to be different
#compared to the other 2 islands. While this may also be affected by the species that mostly live in the
#corresponding island, a skeptical approach should always be applied.
#Lets use island as our block for ANOVA in penguins data, we'll use bill_depth as the response variable
blk_aov = aov(bill_depth_mm~species+island, data = penguins)
summary(blk_aov)
#Lets compare the above ANOVA table and one way ANOVA table that only consider species as the single factor
aov1 = aov(bill_depth_mm~species, data = penguins)
summary(aov1)
###Latin square###
#A more specific case of blocking is known as "latin square".
#This concept of blocking can be imagined as "2 dimensional blocking", that is we do 2 layer of blocking.
#The oldest application can be found in agriculture where the researcher trying to block the effect of
#"row" and "collumn" of the field.
#The rule in which the seed be planted in this segmented field is similar to the game of sudoku (one type
#can only exist once for each collumn and row).
#The rule in which latin square is designed is also widely used as scheduling method in many sports event
#Lets try to apply latin square in the following sample data
rows = c(rep("r1",1), rep("r2",1), rep("r3",1), rep("r4",1), rep("r5",1))
cols = c(rep("cA",5), rep("cB",5), rep("cC",5), rep("cD",5), rep("cE",5))
treatments = c("A","C","D","E","B", "D","B","C","A","E", "E","A","B","C","D", "B","E","A","D","C", "C","D","E","B","A")
yield = c(7.4,11.8,10.1,8.8,11.8,8.9,6.5,17.9,10.1,8.8,5.8,8.7,9.0,15.7,14.3,12.0,7.6,8.5,11.1,18.4,14.3,7.9,7.1,7.4,10.1)
y = data.frame(cols,rows,treatments, yield)
matrix(y$treatments, 5,5)#The latin square
grec_design$sketch
ggline(penguins, x = "species", y = "body_mass_g", color = "sex",
add = c("mean_se"))
#Interaction plot
interaction.plot(x.factor = penguins$species, trace.factor = penguins$sex,
response = penguins$body_mass_g, fun = mean,
type = "b", legend = TRUE,
xlab = "Species", ylab="Body Mass (g)",
pch=c(1,19), col = c("#00AFBB", "#E7B800"))
install.packages("SixSigma")
des1 = expand.grid(A = gl(2, 1, labels = c("-", "+")),
B = gl(2, 1, labels = c("-", "+")))
des1
#The above design is interpreted as combination of values between the 2 factors, and for
#this example we have the 2^2 factorial design.
#In practice, after arranging such combination, the response is obviously will then be measured
#In this example, let's suppose the following numbers are the response
#Randomize the experiment
des1$ord = sample(1:4, 4)
des1[order(ExperimentDesign$ord), ]
des1[order(des1$ord), ]
#Create replicates
data_des1 = data.frame(repl = rep(1:2, each = 8),
rbind(des1))
data_des1
#Create replicates
data_des1 = data.frame(repl = rep(1:2, each = 4),
rbind(des1))
data_des1
#Add responses
data_des1$response = c(5.33, 6.99,
2.26, 6.24,
5.13, 6.76,
2.79, 2.48)
data_des1
#Now lets comute average score for each experiment design
aggregate(response ~ A + B,
FUN = mean, data = data_des1)
#If we look at the mean table, we can faintly see a pattern of effect where high value of
#factor A yields high value of response while the factor B seems to have the opposite effect.
#Now lets test the factor significance with ANOVA table
#Get restuls
fac_mod1 = lm(response ~ A + B + A*B, data = data_des1)
summary(fac_mod1)
aov(fac_mod1)
summary(aov(fac_mod1))
#Turns out the interaction term is not significance, lets remove it from the model
fac_mod1 = lm(response ~ A + B, data = data_des1)
summary(aov(fac_mod1))
#Since we have 2 factors and no interaction, lets use type II SS
fac_mod2 = lm(response ~ B + A, data = data_des1)
summary(aov(fac_mod2))
#Since we have 2 factors and no interaction, lets use type II SS
fac_mod2 = anova(response ~ B + A, data = data_des1)
#Since we have 2 factors and no interaction, lets use type II SS
fac_mod2 = anova(lm(response ~ B + A, data = data_des1))
summary(fac_mod2)
#Since we have 2 factors and no interaction, lets use type II SS
fac_mod2 = anova(lm(response ~ B + A, data = data_des1))
summary(fac_mod2)
fac_mod2
#Since we have 2 factors and no interaction, lets use type II SS
fac_mod2 = anova(lm(response ~ A + B, data = data_des1))
fac_mod2
#Turns out the interaction term is not significance, lets remove it from the model
fac_mod1 = lm(response ~ A + B, data = data_des1)
summary(aov(fac_mod1))
rm(fac_mod2)
summary(aov(fac_mod1))
#In general, 2^k factorial design is obviously not limited only for 2 factors.
#Lets say we want to do 2^3 factorial design with 2 replications
des1 = expand.grid(A = gl(2, 1, labels = c("-", "+")),
B = gl(2, 1, labels = c("-", "+")),
C = gl(2, 1, labels = c("-", "+")))
des1 = expand.grid(A = gl(2, 1, labels = c("-", "+")),
B = gl(2, 1, labels = c("-", "+")))
#In general, 2^k factorial design is obviously not limited only for 2 factors.
#Lets say we want to do 2^3 factorial design with 2 replications
des2 = expand.grid(A = gl(2, 1, labels = c("-", "+")),
B = gl(2, 1, labels = c("-", "+")),
C = gl(2, 1, labels = c("-", "+")))
des2
des2$ord = sample(1:8, 8)
des2[order(des2$ord), ]
data_des2 = data.frame(repl = rep(1:2, each = 8),
rbind(des2))
data_des2
#Add responses
data_des1$response = c(5.33, 6.99, 4.23, 6.61,
2.26, 5.75, 3.26, 6.24,
5.7, 7.71, 5.13, 6.76,
2.79, 4.57, 2.48, 6.18)
#Add responses
data_des2$response = c(5.33, 6.99, 4.23, 6.61,
2.26, 5.75, 3.26, 6.24,
5.7, 7.71, 5.13, 6.76,
2.79, 4.57, 2.48, 6.18)
data_des2
#ANOVA
fac_mod2 = lm(response ~ A * B * C, data = data_des2)
summary(aov(fac_mod2))
#Based on the above table, we got one interaction term significant and 2 individual factor
#are also significant, thus we simplify using linear model selection rule
fac_mod2 = lm(response ~ A + B + C + A:B + A:C + B:C, data = data_des2)
summary(aov(fac_mod2))
#Since interaction A:B is still not significant, removal is needed
fac_mod2 = lm(response ~ A + B + C + A:C + B:C, data = data_des2)
summary(aov(fac_mod2))
##Visualization of effects
#For the 2nd factorial model, lets plot the effect of each term in the model for the response
#Factor A Plot
plot(c(-1,1), ylim = range(data_des2$response),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[2],
type = "b", pch = 16)
abline(h = coef(fac_mod2)[1])
##Visualization of effects
#For the 2nd factorial model, lets plot the effect of each term in the model for the response
#Factor A Plot
plot(c(-1,1), ylim = range(data_des2$response),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[2],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
abline(h = coef(fac_mod2)[1])
coef(fac_mod2)[1]
coef(fac_mod2)[2]
#Factor B
plot(c(-1,1), ylim = range(data_des2$response),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[3],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
abline(h = coef(fac_mod2)[1])
#Factor C
plot(c(-1,1), ylim = range(data_des2$response),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[4],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
abline(h = coef(fac_mod2)[1])
range(data_des2$response)
#Factor C
plot(c(-1,1), ylim = range(2:8),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[4],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
#Factor C
plot(c(-1,1), ylim = range(2:8),
c(-1,1) * coef(fac_mod2)[4],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
coef(fac_mod2)[4]
#Factor C
plot(c(-1,1), ylim = range(2:8),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[4],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
summary(fac_mod2)
predict(fac_mod2)
#Factor C
plot(c(-1,1), ylim = range(predict(fac_mod2)),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[4],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
#Factor C
plot(c(-1,1), ylim = range(2:10),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[4],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
#Factor C
plot(c(-1,1), ylim = range(1:10),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[4],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
abline(h = coef(fac_mod2)[1])
#Factor B
plot(c(-1,1), ylim = range(1:10),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[3],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
abline(h = coef(fac_mod2)[1])
##Visualization of effects
#For the 2nd factorial model, lets plot the effect of each term in the model for the response
#Factor A
plot(c(-1,1), ylim = range(1:10),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[2],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
abline(h = coef(fac_mod2)[1])
#Individual factor in a comparison plots
comparative1 = data.frame(Factor = rep(c("A","B", "C"),each = 2),
Level = rep(c(-1,1), 2),
Response = c(aggregate(response ~ A, FUN = mean, data = data_des2)[,2],
aggregate(response ~ B, FUN = mean, data = data_des2)[,2],
aggregate(response ~ C, FUN = mean, data = data_des2)[,2]))
#Individual factor in a comparison plots
comparative1 = data.frame(Factor = rep(c("A","B", "C"),each = 2),
Level = rep(c(-1,1), 3),
Response = c(aggregate(response ~ A, FUN = mean, data = data_des2)[,2],
aggregate(response ~ B, FUN = mean, data = data_des2)[,2],
aggregate(response ~ C, FUN = mean, data = data_des2)[,2]))
main_effects <- ggplot(comparative1,
aes(x = Level, y = Response)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = c(-1, 1)) +
facet_grid(. ~ Factor)
library(ggplot2)
main_effects <- ggplot(comparative1,
aes(x = Level, y = Response)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = c(-1, 1)) +
facet_grid(. ~ Factor)
main_effects
#Interactions
#A and C
inteff = aggregate(response ~ A * C,FUN = mean, data = data_des2)
effects_interaction = ggplot(inteff, aes(x = A, y = response, color = C)) +
geom_point() +
geom_line(aes(group = C))
effects_interaction
effects_interaction2 = ggplot(inteff2, aes(x = B, y = response, color = C)) +
geom_point() +
geom_line(aes(group = C))
#B and C
inteff2 = aggregate(response ~ B * C,FUN = mean, data = data_des2)
effects_interaction2 = ggplot(inteff2, aes(x = B, y = response, color = C)) +
geom_point() +
geom_line(aes(group = C))
effects_interaction2
effects_interaction
effects_interaction2
des1
data_des1
#Now lets compute average score for each experiment design
aggregate(response ~ A + B,
FUN = mean, data = data_des1)
#If we look at the mean table, we can faintly see a pattern of effect where high value of
#factor A yields high value of response while the factor B seems to have the opposite effect.
#Now lets test the factor significance with ANOVA table
#Get results
fac_mod1 = lm(response ~ A + B + A*B, data = data_des1)
summary(aov(fac_mod1))
summary(fac_mod1)
#Turns out the interaction term is not significance, lets remove it from the model
fac_mod1 = lm(response ~ A + B, data = data_des1)
summary(aov(fac_mod1))
des2
data_des2
#ANOVA
fac_mod2 = lm(response ~ A * B * C, data = data_des2)
summary(aov(fac_mod2))
summary(aov(fac_mod2))
#Since interaction A:B is still not significant, removal is needed
fac_mod2 = lm(response ~ A + B + C + A:C + B:C, data = data_des2)
summary(aov(fac_mod2))
##Individual factor
#Factor A
plot(c(-1,1), ylim = range(1:10),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[2],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor A value")
abline(h = coef(fac_mod2)[1])
#Factor B
plot(c(-1,1), ylim = range(1:10),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[3],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor B value")
abline(h = coef(fac_mod2)[1])
#Factor C
plot(c(-1,1), ylim = range(1:10),
coef(fac_mod2)[1] + c(-1,1) * coef(fac_mod2)[4],
type = "b", pch = 16, ylab = "Response outcome",  xlab = "Factor C value")
abline(h = coef(fac_mod2)[1])
#Individual factor in a comparison plots
comparative1 = data.frame(Factor = rep(c("A","B", "C"),each = 2),
Level = rep(c(-1,1), 3),
Response = c(aggregate(response ~ A, FUN = mean, data = data_des2)[,2],
aggregate(response ~ B, FUN = mean, data = data_des2)[,2],
aggregate(response ~ C, FUN = mean, data = data_des2)[,2]))
main_effects = ggplot(comparative1,aes(x = Level, y = Response)) +
geom_point() +
geom_line() +
scale_x_continuous(breaks = c(-1, 1)) +
facet_grid(. ~ Factor)
main_effects
effects_interaction
effects_interaction2
